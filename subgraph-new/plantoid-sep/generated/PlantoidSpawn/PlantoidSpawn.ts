// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class PlantoidSpawned extends ethereum.Event {
  get params(): PlantoidSpawned__Params {
    return new PlantoidSpawned__Params(this);
  }
}

export class PlantoidSpawned__Params {
  _event: PlantoidSpawned;

  constructor(event: PlantoidSpawned) {
    this._event = event;
  }

  get plantoid(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PlantoidSpawn__plantoidAddressResult {
  value0: Address;
  value1: boolean;

  constructor(value0: Address, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }

  getAddr(): Address {
    return this.value0;
  }

  getExists(): boolean {
    return this.value1;
  }
}

export class PlantoidSpawn extends ethereum.SmartContract {
  static bind(address: Address): PlantoidSpawn {
    return new PlantoidSpawn("PlantoidSpawn", address);
  }

  plantoidAddress(
    by: Address,
    salt: Bytes,
  ): PlantoidSpawn__plantoidAddressResult {
    let result = super.call(
      "plantoidAddress",
      "plantoidAddress(address,bytes32):(address,bool)",
      [ethereum.Value.fromAddress(by), ethereum.Value.fromFixedBytes(salt)],
    );

    return new PlantoidSpawn__plantoidAddressResult(
      result[0].toAddress(),
      result[1].toBoolean(),
    );
  }

  try_plantoidAddress(
    by: Address,
    salt: Bytes,
  ): ethereum.CallResult<PlantoidSpawn__plantoidAddressResult> {
    let result = super.tryCall(
      "plantoidAddress",
      "plantoidAddress(address,bytes32):(address,bool)",
      [ethereum.Value.fromAddress(by), ethereum.Value.fromFixedBytes(salt)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PlantoidSpawn__plantoidAddressResult(
        value[0].toAddress(),
        value[1].toBoolean(),
      ),
    );
  }

  spawnPlantoid(salt: Bytes, initData: Bytes): Address {
    let result = super.call(
      "spawnPlantoid",
      "spawnPlantoid(bytes32,bytes):(address)",
      [ethereum.Value.fromFixedBytes(salt), ethereum.Value.fromBytes(initData)],
    );

    return result[0].toAddress();
  }

  try_spawnPlantoid(
    salt: Bytes,
    initData: Bytes,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "spawnPlantoid",
      "spawnPlantoid(bytes32,bytes):(address)",
      [ethereum.Value.fromFixedBytes(salt), ethereum.Value.fromBytes(initData)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  template(): Address {
    let result = super.call("template", "template():(address)", []);

    return result[0].toAddress();
  }

  try_template(): ethereum.CallResult<Address> {
    let result = super.tryCall("template", "template():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _template(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class SpawnPlantoidCall extends ethereum.Call {
  get inputs(): SpawnPlantoidCall__Inputs {
    return new SpawnPlantoidCall__Inputs(this);
  }

  get outputs(): SpawnPlantoidCall__Outputs {
    return new SpawnPlantoidCall__Outputs(this);
  }
}

export class SpawnPlantoidCall__Inputs {
  _call: SpawnPlantoidCall;

  constructor(call: SpawnPlantoidCall) {
    this._call = call;
  }

  get salt(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get initData(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SpawnPlantoidCall__Outputs {
  _call: SpawnPlantoidCall;

  constructor(call: SpawnPlantoidCall) {
    this._call = call;
  }

  get newPlantoid(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
